<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2015 Cisco Systems and others. All rights reserved.
This program and the accompanying materials are made available under the
terms of the Eclipse Public License v1.0 which accompanies this distribution,
and is available at http://www.eclipse.org/legal/epl-v10.html INTERNAL
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
     <groupId>org.opendaylight.odlparent</groupId>
     <artifactId>features-parent</artifactId>
     <version>1.6.0-Beryllium</version>
     <relativePath/>
   </parent>

  <groupId>org.opendaylight.tutorials</groupId>
  <artifactId>hello-features</artifactId>
  <version>3.0.0-SNAPSHOT</version>
  <name>${project.artifactId}</name>

  <prerequisites>
    <maven>3.1.1</maven>
  </prerequisites>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Build Plugin Versions -->
        <controller.config.version>0.4.0-Beryllium</controller.config.version>
        <controller.mdsal.version>1.3.0-Beryllium</controller.mdsal.version>

        <netconf.parent.version>1.0.0-Beryllium</netconf.parent.version>
        <netconf.restconf.version>1.3.0-Beryllium</netconf.restconf.version>
        <jmxGeneratorPath>src/main/yang-gen-config</jmxGeneratorPath>
        <salGeneratorPath>src/main/yang-gen-sal</salGeneratorPath>

        <yangtools.version>0.8.0-Beryllium</yangtools.version>
        <yangtools.binding.version>0.8.0-Beryllium</yangtools.binding.version>

        <mdsal.version>2.0.0-Beryllium</mdsal.version>
        <mdsal.model.version>0.8.0-Beryllium</mdsal.model.version>


        <controller.karaf.branding.version>1.2.0-Beryllium</controller.karaf.branding.version>
        <controller.karaf.resources.version>1.6.0-Beryllium</controller.karaf.resources.version>
        <controller.karaf.empty.version>1.6.0-Beryllium</controller.karaf.empty.version>


        <pax.logging.service.version>1.8.2</pax.logging.service.version>
        <pax.logging.api.version>1.8.2</pax.logging.api.version>
        <dlux.version>0.3.0-Beryllium</dlux.version>

        <!-- 项目其他依赖-->
        <!-- <karaf.maven.version>3.0.1</karaf.maven.version>-->
        <mojo.build.helper.maven.plugin.version>1.8</mojo.build.helper.maven.plugin.version>
        <!-- Test Libraries -->
        <karaf.version>3.0.3</karaf.version>
        <powermock.version>1.5.6</powermock.version>
        <junitparams.version>1.0.3</junitparams.version>
        <javafasterxml.version>3.1.3</javafasterxml.version>
    </properties>

    <dependencies>
        <!--
      Put dependencies on any feature repos you use in your features.xml file.

      Note: they will need to be <type>xml</xml>
      and <classifier>features</classifier>.
      One other thing to watch for is to make sure they are
      <scope>compile</compile>, which they should be by default,
      but be cautious lest they be at a different scope in a parent pom.
      依赖的其他features,对应features.xml中的<repository></repository>配置和依赖的features配置
    -->
        <dependency>
            <groupId>org.opendaylight.yangtools</groupId>
            <artifactId>features-yangtools</artifactId>
            <version>${yangtools.version}</version>
            <classifier>features</classifier>
            <type>xml</type>
        </dependency>

        <dependency>
            <groupId>org.opendaylight.controller</groupId>
            <artifactId>features-mdsal</artifactId>
            <version>${controller.mdsal.version}</version>
            <classifier>features</classifier>
            <type>xml</type>
        </dependency>

        <dependency>
            <groupId>org.opendaylight.mdsal</groupId>
            <artifactId>features-mdsal</artifactId>
            <version>${mdsal.version}</version>
            <type>xml</type>
            <classifier>features</classifier>
        </dependency>


        <dependency>
            <groupId>org.opendaylight.mdsal.model</groupId>
            <artifactId>features-mdsal-model</artifactId>
            <version>${mdsal.model.version}</version>
            <classifier>features</classifier>
            <type>xml</type>
        </dependency>

        <dependency>
            <groupId>org.opendaylight.netconf</groupId>
            <artifactId>features-restconf</artifactId>
            <version>${netconf.restconf.version}</version>
            <classifier>features</classifier>
            <type>xml</type>
        </dependency>

        <dependency>
            <groupId>org.opendaylight.netconf</groupId>
            <artifactId>features-netconf-connector</artifactId>
            <version>${netconf.parent.version}</version>
            <classifier>features</classifier>
            <type>xml</type>
        </dependency>




        <!--
                            BUNDLES SECTION
              Put dependencies for bundles directly referenced in your features.xml file.
              For every <bundle> reference in your features.xml file, you need a corresponding dependency here.
              对应features中的<bundle>配置
            -->

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>hello-model</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>hello-impl</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!--  END BUNDLES SECTION -->

        <!--
           CONFIGFILES SECTION
     Put dependencies for configfiles directly referenced in your features.xml file.
     For every <configfile> reference in your features.xml file, you need a corresponding dependency here.
        -->
        <!--  项目自己的配置依赖-->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>hello-config</artifactId>
            <version>${project.version}</version>
            <type>xml</type>
            <classifier>config</classifier>
        </dependency>

        <!--  OTHER STUFF SECTION -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>

        <!-- test to validate features.xml -->
        <!-- 没有这个配置？-->
        <dependency>
            <groupId>org.opendaylight.odlparent</groupId>
            <artifactId>features-test</artifactId>
            <version>${parent.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- dependency for opendaylight-karaf-empty for use by testing -->
        <dependency>
            <groupId>org.opendaylight.controller</groupId>
            <artifactId>opendaylight-karaf-empty</artifactId>
            <version>${controller.karaf.empty.version}</version>
            <type>zip</type>
        </dependency>
        <!-- Uncomment this if you get an error : java.lang.NoSuchMethodError: org.slf4j.helpers.MessageFormatter.format(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)Lorg/slf4j/helpers/FormattingTuple; -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
        </dependency>

    </dependencies>


</project>
